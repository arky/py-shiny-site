---
title: "UI as HTML"
format: html
---


Underneath the hood, Shiny UI stands on a foundation of HTML, CSS, and JavaScript.
In fact, if you print a UI component in a Python REPL, you'll see its HTML representation:

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
ui.input_action_button("btn", "Button")
```

## Creating HTML

Shiny provides some convenience for creating HTML, like `ui.markdown()`:

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
ui.markdown("Hello **world**!")
```

Also, `ui.HTML()` for raw HTML:

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
ui.HTML("<p>Hello <strong>world</strong>!</p>")
```

As well as common HTML tags like `ui.div()`, `ui.span()`, `ui.p()`, `ui.h2()`, etc.

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
ui.div("Hello", ui.span("world"), "!")
```

Also, less common tags are available under `ui.tags`:

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
ui.tags.video(src="video.mp4")
```

## HTML tag objects

One benefit working with formal `Tag` object (e.g., `ui.div()`) is that you can use its methods and attributes to:

1. Add/remove HTML attributes like `class` and `style`.
2. Add/remove child tags.
3. `show()` to view the HTML in a browser:

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
x = ui.div("Hello")
x.add_style("color:red;")
# x.show()
```

That said, you can also provide HTML attributes when creating the `Tag` (via either named arguments or a dictionary):

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
# Both of these are equivalent:
ui.a("Help", href="help.html")
ui.a({"href": "help.html"}, "Help")
```

::: {.callout-tip collapse="true"}
### Reserved keywords like class

In Python, there are some reserved keywords which can't be used as argument names, such as `class`.
To get around this, you can either use a dictionary as above, or append an underscore to the argument.
If there's a trailing `_`, it will be stripped off when creating the tag object.

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
# Two ways of doing the same thing
ui.a({"href": "help.html", "class": "help-link"}, "Help")
ui.a("Help", href="help.html", class_="help-link")
<a href="help.html">Help</a>
```
:::

## List fragments

Sometimes it's useful to create a list fragment of HTML -- use a `TagList()` for this.

```{shinylive-python}
#| components: [editor, cell]
from shiny import ui
ui.TagList(
    ui.div("Hello"),
    ui.span("World"),
    "!"
)
```

## `<head>` content

Sometimes it's useful to include content in the `<head>` of the document, like CSS, JavaScript, `<meta>` tags, etc.
To do this, use `ui.head_content()`, which can be placed anywhere in the UI to include content in the `<head>` of the document.

```python
from shiny import ui

ui.head_content(
    ui.tags.meta(name="robots", content="noindex")
)
```

Note that if you find yourself using `ui.head_content()` to import CSS and JavaScript that should only be included once, you might want to consider using `HTMLDependency()` instead (see below).

## HTML Dependencies

Sometimes it's useful to have more reassurance that CSS/Javascript files are only loaded once, even they happen to be included in multiple places in the UI (e.g., loading a framework like React).
The `HTMLDependency()` class helps with this, and can be included as a child of any `Tag`/`TagList` object.
When rendered, the `HTMLDependency()` will be included in the `<head>` of the document with the appropriate `<link>` and `<script>` tags.
Here's some pseudo-code to illustrate how one might use it:

```python
from shiny import ui

def my_ui(x):
    return ui.TagList(
        x,
        ui.HTMLDependency(
            name="my-ui",
            version="0.1.0",
            source={"subdir": ...},
            stylesheet=[{"href": "my-ui.css"}],
            script=[{"src": "my-ui.js"}],
        )
    )
```

For concrete examples, and to learn more, see the articles on creating [custom Shiny bindings](custom-component-one-off.qmd).


## HTML-like objects

If you've created a custom Python object that you'd like to be able to render as a Shiny UI object, you can either create a full-blown [Shiny binding](custom-component-one-off.qmd) and/or implement a [`_repr_html_` method](https://ipython.readthedocs.io/en/stable/config/integrating.html#rich-display).
The former approach is recommended if it's important to access the object's state from Python, while the latter is recommended if the object is just a simple container for HTML (plus, it should also work in Jupyter notebooks).
