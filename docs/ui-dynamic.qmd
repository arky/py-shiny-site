---
title: Dynamic UI
---

It's often useful to programmatically update the UI based on user input or other server-side state.
Shiny provides several mechanisms for doing this, including conditional UI, updating inputs, and dynamic UI.
Amongst these [dynamic UI](#dynamic-ui) is the most general and powerful, but also comes with the most overhead.


### Conditional UI

Often times it's useful to show or hide UI components based on some condition.
`ui.panel_conditional()` enables this by showing/hiding UI based on a whether a JavaScript condition is truthy.
This condition can reference input values, and used to make any sort of UI conditional (not just a string as done here).

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 100

from shiny.express import ui

ui.input_radio_buttons("display", None, ["hidden", "shown"], inline=True)

# The 1st string is a JavaScript condition, and the child UI is shown if it's truthy
# NOTE: JS input values are read via `input[id]`, not `input[id]()`
with ui.panel_conditional("input.display === 'shown'"):
    "Hidden content"
```


### Updating inputs

Updating inputs server-side is useful for updating input parameters that are usually hard-coded in the UI.

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 200

from shiny import reactive
from shiny.express import input, ui

CHOICES = {
  "lower": ["a", "b", "c"],
  "upper": ["A", "B", "C"]
}

ui.input_switch("uppercase", "Uppercase choices", value=False)
ui.input_selectize("x", None, choices=CHOICES["lower"])

@reactive.effect
def _():
    choices = "upper" if input.uppercase() else "lower"
    ui.update_selectize("x", choices=CHOICES[choices])
```


### Dynamic UI {#dynamic-ui}

Dynamic UI is a powerful feature that enables dynamic (i.e., server-side) rendering of any UI component(s).
Like any other output, start with a container for output (via `ui.output_ui()`), and then apply `@render.ui` to a function that returns UI component(s).
Here, for a starting example, we'll recreate the previous example using dynamic UI.


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 250
from shiny import render
from shiny.express import input, ui

ui.input_text("message", "Message", value="Hello, world!")

ui.input_checkbox_group(
  "styles", "Styles",
  choices=["Bold", "Italic"],
  selected=["Bold"],
  inline=True
)

@render.ui
def result():
    x = input.message()
    if "Bold" in input.styles():
        x = ui.strong(x)
    if "Italic" in input.styles():
        x = ui.em(x)
    return x
```


::: callout-tip

Anything that's statically renderable can be rendered dynamically (e.g.,
`ui.markdown()`, `ui.HTML()`, `ui.div()`, inputs, outputs, etc).
:::


:::{.callout-warning}
## Dynamic UI vs. updating inputs vs. conditional UI

Dynamic UI is a more general mechanism than the updating inputs and conditional UI patterns, and can be used to update any UI component(s) (not just inputs). However, updating inputs is more efficient than dynamic UI, and should be preferred when possible.
:::
